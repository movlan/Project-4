{"version":3,"sources":["utils/tokenService.js","utils/userService.js","pages/LoginPage/LoginPage.jsx","components/SignupForm/SignupForm.jsx","pages/SignupPage/SignupPage.jsx","components/LocalInfo/LocalInfo.jsx","components/LocalCategories/LocalCategories.jsx","components/RestaurantsList/RestaurantsList.jsx","components/LocalEstablishments/LocalEstablishments.jsx","components/NavBar/NavBar.jsx","services/zomato-api.js","App.js","services/geolocation.js","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","getUserFromToken","user","removeToken","login","creds","fetch","BASE_URL","method","headers","Headers","body","stringify","then","res","ok","json","Error","tokenService","signup","getUser","logout","LoginPage","state","email","password","handleChange","e","setState","target","name","value","handleSubmit","a","preventDefault","userService","props","handleSignupOrLogin","history","push","console","log","onSubmit","this","type","placeholder","onChange","className","Component","SignupForm","passwordConf","disabled","isFormInvalid","to","SignupPage","LocalInfo","info","localInfo","popularity","city","subzone","top_cuisines","map","cuisines","i","key","LocalCategories","selectCategory","selected","localCategories","cat","categories","id","RestaurantsList","removedRestaurants","removedRestaurantsList","restaurant","onClick","addRestaurant","restaurants","removeRestaurant","LocalEstablishments","selectEstablishment","localEstablishments","establishment","NavBar","userLinks","handleLogout","Fragment","data-target","getCategories","lat","lon","getGeocode","getCuisines","getSearch","category","getEstablishments","establishments","App","categoryId","searchRestaurants","establishmentId","length","removedRestaurant","filter","removedList","copyOfRestaurants","addedRestaurant","copyOfRemovedRestaurants","sidenav","document","querySelector","M","Sidenav","init","Promise","resolve","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","component","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2f717e9.chunk.js","sourcesContent":["function setToken(token) {\r\n  if (token) {\r\n    localStorage.setItem(\"token\", token);\r\n  } else {\r\n    localStorage.removeItem(\"token\");\r\n  }\r\n}\r\n\r\nfunction getToken() {\r\n  let token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    // Check if expired, remove if it is\r\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n    // JWT exp is expressed in seconds, not milliseconds, so convert\r\n    if (payload.exp < Date.now() / 1000) {\r\n      localStorage.removeItem(\"token\");\r\n      token = null;\r\n    }\r\n  }\r\n  return token;\r\n}\r\n\r\nfunction getUserFromToken() {\r\n  const token = getToken();\r\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\r\n}\r\n\r\nfunction removeToken() {\r\n  localStorage.removeItem(\"token\");\r\n}\r\n\r\nexport default {\r\n  setToken,\r\n  getToken,\r\n  getUserFromToken,\r\n  removeToken,\r\n};\r\n","import tokenService from \"./tokenService\";\r\n\r\nconst BASE_URL = \"/users/\";\r\n\r\nfunction login(creds) {\r\n  return fetch(BASE_URL + \"login\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify(creds),\r\n  })\r\n    .then((res) => {\r\n      // Valid login if we have a status of 2xx (res.ok)\r\n      if (res.ok) return res.json();\r\n      throw new Error(\"Bad Credentials!\");\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n}\r\n\r\nfunction signup(user) {\r\n  return fetch(BASE_URL + \"signup\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify(user),\r\n  })\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n\r\n      throw new Error(\"Email already taken!\");\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nexport default {\r\n  login,\r\n  signup,\r\n  getUser,\r\n  logout,\r\n};\r\n","import React, { Component } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport userService from \"../../utils/userService\";\r\n\r\nclass LoginPage extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await userService.login(this.state);\r\n      this.props.handleSignupOrLogin();\r\n      this.props.history.push(\"/\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <header>Log In</header>\r\n        <div>\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            onChange={this.handleChange}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            name=\"password\"\r\n            onChange={this.handleChange}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <button className=\"btn\">Log In</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport userService from \"../../utils/userService\";\r\n\r\nclass SignupForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordConf: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await userService.signup(this.state);\r\n      this.props.handleSignupOrLogin();\r\n      this.props.history.push(\"/\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  isFormInvalid() {\r\n    return !(\r\n      this.state.name &&\r\n      this.state.email &&\r\n      this.state.password === this.state.passwordConf\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>Sign Up</header>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            value={this.state.name}\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            value={this.state.email}\r\n            name=\"email\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={this.state.password}\r\n            name=\"password\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={this.state.passwordConf}\r\n            name=\"passwordConf\"\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className=\"btn\" disabled={this.isFormInvalid()}>\r\n            Sign Up\r\n          </button>\r\n          &nbsp;&nbsp;\r\n          <Link className=\"btn\" to=\"/\">\r\n            Cancel\r\n          </Link>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignupForm;\r\n","import React, { Component } from \"react\";\r\nimport SignupForm from \"../../components/SignupForm/SignupForm\";\r\n\r\nclass SignupPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SignupPage\" history={this.props.history}>\r\n        <SignupForm {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignupPage;\r\n","import React from \"react\";\r\n\r\nexport const LocalInfo = (props) => {\r\n  let info = props.localInfo ? (\r\n    <div className=\"card\">\r\n      <div className=\"card-content\">\r\n        {/* <div className=\"\"></div> */}\r\n        <span className=\"card-title\">Local Information</span>\r\n        <p>City: {props.localInfo.popularity.city}</p>\r\n        <p>Neighborhood: {props.localInfo.popularity.subzone}</p>\r\n        <p>Top cuisines: </p>\r\n        <div>\r\n          {props.localInfo.popularity.top_cuisines.map((cuisines, i) => (\r\n            <span className=\"collection-item\" key={i}>\r\n              {cuisines}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <p>loading...</p>\r\n  );\r\n\r\n  return <div className=\"col s12\">{info}</div>;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const LocalCategories = (props) => {\r\n  function handleChange(e) {\r\n    props.selectCategory(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div className=\"col s12 m6\">\r\n      <form onSubmit={handleSubmit}>\r\n        <br />\r\n        <select className=\"browser-default\" onChange={(e) => handleChange(e)}>\r\n          <option value=\"\" disabled selected>\r\n            Choose Category\r\n          </option>\r\n          {props.localCategories.map((cat) => (\r\n            <option\r\n              key={cat.categories.id}\r\n              value={cat.categories.id}\r\n              // onClick={() => props.selectCategory(cat.categories.id)}\r\n            >\r\n              {cat.categories.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const RestaurantsList = (props) => {\r\n  let removedRestaurants = (\r\n    <div className=\"col s12 m6\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <span className=\"card-title\">Removed Restaurants</span>\r\n          <div className=\"collection\">\r\n            {props.removedRestaurantsList.map((restaurant) => (\r\n              <p\r\n                className=\"collection-item\"\r\n                key={restaurant.restaurant.id}\r\n                onClick={() => props.addRestaurant(restaurant.restaurant.id)}\r\n              >\r\n                {restaurant.restaurant.name}\r\n              </p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  let restaurants = (\r\n    <div className=\"col s12 m6\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <span className=\"card-title\">List of restaurants</span>\r\n          <div className=\"collection\">\r\n            {props.restaurants.map((restaurant) => (\r\n              <p\r\n                className=\"collection-item\"\r\n                key={restaurant.restaurant.id}\r\n                onClick={() => props.removeRestaurant(restaurant.restaurant.id)}\r\n              >\r\n                {restaurant.restaurant.name}\r\n              </p>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"row\">\r\n      {restaurants}\r\n      {removedRestaurants}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const LocalEstablishments = (props) => {\r\n  function handleChange(e) {\r\n    props.selectEstablishment(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div className=\"col s12 m6\">\r\n      <form onSubmit={handleSubmit}>\r\n        <br />\r\n        <select className=\"browser-default\" onChange={(e) => handleChange(e)}>\r\n          <option value=\"\" disabled selected>\r\n            Choose Establishment Type\r\n          </option>\r\n          {props.localEstablishments.map((establishment) => (\r\n            <option\r\n              key={establishment.establishment.id}\r\n              value={establishment.establishment.id}\r\n              // onClick={() => props.selectCategory(cat.categories.id)}\r\n            >\r\n              {establishment.establishment.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = (props) => {\r\n  let userLinks = props.user ? (\r\n    <>\r\n      <li>\r\n        <span>Logged In User, {props.user.name}</span>\r\n      </li>\r\n      <li>\r\n        <Link to=\"\" onClick={props.handleLogout}>\r\n          LOG OUT\r\n        </Link>\r\n      </li>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <li>\r\n        <Link to=\"/login\">LOG IN</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/signup\">SIGN UP</Link>\r\n      </li>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <nav className=\"light-green\">\r\n        <div className=\"container\">\r\n          <div className=\"nav-wrapper\">\r\n            <Link to=\"/\" className=\"brand-logo\">\r\n              Where Should We Eat\r\n            </Link>\r\n            <Link to=\"\" data-target=\"mobile-demo\" className=\"sidenav-trigger\">\r\n              <i className=\"material-icons\">menu</i>\r\n            </Link>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n              {userLinks}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <ul className=\"sidenav\" id=\"mobile-demo\">\r\n        {userLinks}\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","async function getCategories(lat, lon) {\r\n  const categories = await fetch(\"/api/zomato/categories\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify({ lat, lon }),\r\n  });\r\n  if (categories) return categories.json();\r\n}\r\n\r\nasync function getGeocode(lat, lon) {\r\n  const info = await fetch(\"/api/zomato/geocode\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify({ lat, lon }),\r\n  });\r\n  if (info) return info.json();\r\n}\r\n\r\nasync function getCuisines(lat, lon) {\r\n  const cuisines = await fetch(\"/api/zomato/cuisines\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify({ lat, lon }),\r\n  });\r\n  if (cuisines) return cuisines.json();\r\n}\r\n\r\nasync function getSearch(lat, lon, establishment, category) {\r\n  const restaurants = await fetch(\"/api/zomato/search\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify({ lat, lon, establishment, category }),\r\n  });\r\n  if (restaurants) return restaurants.json();\r\n}\r\n\r\nasync function getEstablishments(lat, lon) {\r\n  const establishments = await fetch(\"/api/zomato/establishments\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify({ lat, lon }),\r\n  });\r\n  if (establishments) return establishments.json();\r\n}\r\n\r\nexport { getCategories, getGeocode, getCuisines, getSearch, getEstablishments };\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\nimport LoginPage from \"./pages/LoginPage/LoginPage\";\r\nimport SignupPage from \"./pages/SignupPage/SignupPage\";\r\nimport { LocalInfo } from \"./components/LocalInfo/LocalInfo\";\r\nimport { LocalCategories } from \"./components/LocalCategories/LocalCategories\";\r\nimport { RestaurantsList } from \"./components/RestaurantsList/RestaurantsList\";\r\nimport { LocalEstablishments } from \"./components/LocalEstablishments/LocalEstablishments\";\r\nimport userService from \"./utils/userService\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport { getCurrentLatLon } from \"./services/geolocation\";\r\nimport {\r\n  getGeocode,\r\n  getCategories,\r\n  getCuisines,\r\n  getSearch,\r\n  getEstablishments,\r\n} from \"./services/zomato-api\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: userService.getUser(),\r\n      localCategories: [],\r\n      restaurants: [],\r\n      removedRestaurantsList: [],\r\n      establishments: [],\r\n      cuisines: [],\r\n      establishmentId: null,\r\n      categoryId: null,\r\n    };\r\n  }\r\n\r\n  handleLogout = () => {\r\n    userService.logout();\r\n    this.setState({ user: null });\r\n  };\r\n\r\n  handleSignupOrLogin = () => {\r\n    this.setState({ user: userService.getUser() });\r\n  };\r\n\r\n  selectCategory = async (id) => {\r\n    this.setState({ categoryId: id }, () => this.searchRestaurants());\r\n    // this.searchRestaurants();\r\n  };\r\n\r\n  selectEstablishment = async (id) => {\r\n    this.setState({ establishmentId: id }, () => this.searchRestaurants());\r\n    // this.searchRestaurants();\r\n  };\r\n\r\n  searchRestaurants = async () => {\r\n    console.log(\r\n      this.state.lat,\r\n      this.state.lon,\r\n      this.state.establishmentId,\r\n      this.state.categoryId\r\n    );\r\n    const restaurants = await getSearch(\r\n      this.state.lat,\r\n      this.state.lon,\r\n      this.state.establishmentId,\r\n      this.state.categoryId\r\n    );\r\n    this.setState({ restaurants });\r\n  };\r\n\r\n  removeRestaurant = (id) => {\r\n    if (this.state.restaurants.length > 1) {\r\n      let removedRestaurant = this.state.restaurants.filter(\r\n        (restaurant) => restaurant.restaurant.id === id\r\n      );\r\n      let removedList = this.state.removedRestaurantsList;\r\n      removedList.push(removedRestaurant[0]);\r\n      let copyOfRestaurants = this.state.restaurants.filter(\r\n        (restaurant) => restaurant.restaurant.id !== id\r\n      );\r\n      this.setState({\r\n        restaurants: copyOfRestaurants,\r\n        removedRestaurantsList: removedList,\r\n      });\r\n    }\r\n  };\r\n\r\n  addRestaurant = (id) => {\r\n    let addedRestaurant = this.state.removedRestaurantsList.filter(\r\n      (restaurant) => restaurant.restaurant.id === id\r\n    );\r\n    let copyOfRestaurants = this.state.restaurants;\r\n    copyOfRestaurants.push(addedRestaurant[0]);\r\n    let copyOfRemovedRestaurants = this.state.removedRestaurantsList.filter(\r\n      (restaurant) => restaurant.restaurant.id !== id\r\n    );\r\n    this.setState({\r\n      restaurants: copyOfRestaurants,\r\n      removedRestaurantsList: copyOfRemovedRestaurants,\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let sidenav = document.querySelector(\".sidenav\");\r\n    M.Sidenav.init(sidenav, {});\r\n    const { lat, lon } = await getCurrentLatLon();\r\n    const localInfo = await getGeocode(lat, lon);\r\n    const localCategories = await getCategories(lat, lon);\r\n    const establishments = await getEstablishments(lat, lon);\r\n    const cuisines = await getCuisines(lat, lon);\r\n    this.setState({\r\n      lat,\r\n      lon,\r\n      localInfo,\r\n      localCategories,\r\n      cuisines,\r\n      establishments,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavBar handleLogout={this.handleLogout} user={this.state.user} />\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={({ history }) => (\r\n              <div className=\"container\">\r\n                <div className=\"row\">\r\n                  <LocalInfo localInfo={this.state.localInfo} />\r\n                  <LocalCategories\r\n                    categoryId={this.state.categoryId}\r\n                    localCategories={this.state.localCategories}\r\n                    selectCategory={this.selectCategory}\r\n                    restaurants={this.state.restaurants}\r\n                  />\r\n                  <LocalEstablishments\r\n                    establishmentId={this.state.establishmentId}\r\n                    localEstablishments={this.state.establishments}\r\n                    selectEstablishment={this.selectEstablishment}\r\n                    restaurants={this.state.restaurants}\r\n                  />\r\n                </div>\r\n                <RestaurantsList\r\n                  restaurants={this.state.restaurants}\r\n                  removedRestaurantsList={this.state.removedRestaurantsList}\r\n                  removeRestaurant={this.removeRestaurant}\r\n                  addRestaurant={this.addRestaurant}\r\n                />\r\n              </div>\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/login\"\r\n            render={({ history }) => (\r\n              <div className=\"container\">\r\n                <LoginPage\r\n                  history={history}\r\n                  handleSignupOrLogin={this.handleSignupOrLogin}\r\n                />\r\n              </div>\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/signup\"\r\n            render={({ history }) => (\r\n              <div className=\"container\">\r\n                <SignupPage\r\n                  history={history}\r\n                  handleSignupOrLogin={this.handleSignupOrLogin}\r\n                />\r\n              </div>\r\n            )}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export function getCurrentLatLon() {\r\n  // Wrap getCurrentPosition to return a promise\r\n  return new Promise((resolve) => {\r\n    navigator.geolocation.getCurrentPosition((pos) =>\r\n      resolve({\r\n        lat: pos.coords.latitude,\r\n        lon: pos.coords.longitude,\r\n      })\r\n    );\r\n  });\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}